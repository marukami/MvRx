apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "jacoco"
apply plugin: 'com.vanniktech.maven.publish'

group = "com.mtilbrook.mvrx"
version = "1.4.0-SNAPSHOT"

android {
    compileSdkVersion 28
    resourcePrefix 'mvrx_'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildToolsVersion "$buildToolsVersion"
    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api "io.reactivex.rxjava2:rxjava:2.2.17"

    testImplementation "org.mockito:mockito-core:3.2.4"
    testImplementation 'junit:junit:4.13'
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
}

task coverage(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
    classDirectories.from([debugTree], [kotlinDebugTree])

    sourceDirectories.from([
            android.sourceSets.main.java.srcDirs,
            "${project.projectDir}/src/main/kotlin"
    ])
    executionData.from("$buildDir/jacoco/testDebugUnitTest.exec")
}
